statements : NEWLINE* statement (NEWLINE+ statement)* NEWLINE

statement: KEYWORD: RET expr?
         : KEYWORD: CONT
         : KEYWORD: BR 
         : expr

expr    : KEYWORD:VAR IDENTIFIER EQ expr
        : comparison_expression ((KEYWORD:AND|KEYWORD:OR) comparison_expression)*

comparison_expression:  NOT comparison_expression
                        arithmetic-expression (EE|LT|GT|LTE|GTE|NE) arithmetic-expression

arithmetic-expression: term ((PLUS|MINUS) term)*

term    : factor ((MUL|DIV) factor)*

factor  : (PLUS|MINUS) factor
        : power

power   : call (POW factor)*

call    : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom    : INT|FLOAT|STRING|IDENTIFIER
        : LPAREN expr RPAREN
        : list-expr
        : if-expr
        : for-expr
        : while-expr
        : func-def

list-expr : LSQB (expr (COMMA expr)*)? RSQB

if-expr : KEYWORD:IF expr KEYWORD:THEN
          (statement if-expr-b|if-expr-c)
          | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b : KEYWORD:EIF expr KEYWORD:THEN
          (statement if-expr-b|if-expr-c?)
          (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c : KEYWORD:ELSE
          statement
          (NEWLINE statements KEYWORD:END)

for-expr : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
           (KEYWORD:STEP expr)? KEYWORD:THEN statement
           | (NEWLINE statements KEYWORD:END)

while-expr: KEYWORD:WHILE expr KEYWORD:THEN statement
            | (NEWLINE statements KEYWORD:END)

func-def  : KEYWORD:FN IDENTIFIER?
            LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
            ARROW expr 
            | (NEWLINE statements KEYWORD:END)